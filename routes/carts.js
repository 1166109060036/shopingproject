var express = require('express');
var router = express.Router();
var db = require('../db');
const qrcode = require('qrcode');
const promptpay = require('promptpay-qr');
require('dotenv').config(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î .env ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà


// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
router.get('/carts', (req, res) => {
  const userId = req.session.userId;
  console.log('Session userId:', userId);

  if (!userId) {
    return res.redirect('/login');
  }

  const sql = `
    SELECT c.cart_id, c.cart_quantity, c.price, c.product_id,
           p.product_name, p.image
    FROM carts c
    JOIN products p ON c.product_id = p.product_id
    WHERE c.user_id = ?
  `;

  db.query(sql, [userId], (err, cartItems) => {
    if (err) {
      console.error('‚ùå Error loading carts:', err);
      return res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
    }

    res.render('carts', {
      title: 'Shopping Cart',
      cartItems,
    });
  });
});

// ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
router.post('/carts/delete/:cartId', (req, res) => {
  const userId = req.session.userId;
  const cartId = req.params.cartId;

  if (!userId) {
    return res.status(401).send('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
  }

  const checkSql = 'SELECT * FROM carts WHERE cart_id = ? AND user_id = ?';
  db.query(checkSql, [cartId, userId], (err, results) => {
    if (err) {
      console.error('‚ùå Error checking cart:', err);
      return res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    }

    if (results.length === 0) {
      return res.status(403).send('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }

    const deleteSql = 'DELETE FROM carts WHERE cart_id = ?';
    db.query(deleteSql, [cartId], (delErr) => {
      if (delErr) {
        console.error('‚ùå Error deleting cart item:', delErr);
        return res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
      }

      console.log(`üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ cart_id=${cartId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      res.redirect('/carts');
    });
  });
});

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PromptPay (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ carts.ejs)
router.get('/payment/pp-qr', async (req, res) => {
  try {
    const amount = parseFloat(req.query.amount || 0);
    const promptpayId = process.env.PROMPTPAY_ID; // üëâ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠ .env ‡∏´‡∏≤‡∏¢
    const payload = promptpay(promptpayId, { amount });
    const qrDataURL = await qrcode.toDataURL(payload);
    const img = Buffer.from(qrDataURL.split(',')[1], 'base64');

    res.writeHead(200, {
      'Content-Type': 'image/png',
      'Content-Length': img.length,
    });
    res.end(img);
  } catch (err) {
    console.error('‚ùå Error generating PromptPay QR:', err);
    res.status(500).send('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÑ‡∏î‡πâ');
  }
});

module.exports = router;
